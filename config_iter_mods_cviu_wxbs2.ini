[Computing]
LoadColor=1;
numberOfCores=-1; how many cores to use. -1 for maximum possible
[MSER] ;CMP implementation
max_area=0.05; maximum area of the MSER to the image area
min_size=30 ; minimum region size (in pixels)
min_margin=8; threshold
mode=FixedRegNumber;can be "FixedTh", "FixedRegNumber", "RelativeTh", RelativeRegNumber 
;relativeThreshold=0.0001;
regionsNumber = 100;
;relativeRegionsNumber = 0.2;
doOnNormal=1
[HessianAffine];CMP implementation
mode=NotLessThanRegions;FixedTh; "FixedRegNumber", "RelativeTh", RelativeRegNumber, NotLessThanRegions 
threshold = 5.3333; = 16.0f/3.0f // noise dependent threshold on the response (sensitivity)
;relativeThreshold=0.1;
regionsNumber = 2000;
;relativeRegionsNumber = 0.5;
max_iter = 16; number of affine shape interations
patch_size = 41;  width and height of the patch
numberOfScales= 3; number of scale per octave
initialSigma = 1.6; amount of smoothing applied to the initial level of first octave
edgeEigenValueRatio = 10.0; ratio of the eigenvalues
border = 5; number of pixels ignored at the border of image
smmWindowSize = 19; // width and height of the SMM mask, pixels
convergenceThreshold=0.05; //for Baumberg iteration
doBaumberg=1
[HarrisAffine];CMP implementation
mode=FixedTh;NotLessThanRegions;FixedRegNumber;can be "FixedTh", "FixedRegNumber", "RelativeTh", RelativeRegNumber 
threshold = 15.0; = 16.0f/3.0f // noise dependent threshold on the response (sensitivity)
relativeThreshold=0.1;
regionsNumber = 1000;
relativeRegionsNumber = 0.5;
max_iter = 16; number of affine shape interations
patch_size = 41;  width and height of the patch
numberOfScales= 3; number of scale per octave
initialSigma = 1.6; amount of smoothing applied to the initial level of first octave
edgeEigenValueRatio = 10.0; ratio of the eigenvalues
border = 5; number of pixels ignored at the border of image
smmWindowSize = 19; // width and height of the SMM mask, pixels
convergenceThreshold=0.1; //for Baumberg iteration
HarrisCoef = 0.04;
doOnNormal=1
doBaumberg=1
[DoG];CMP implementation;
mode=NotLessThanRegions; can be "FixedTh", "FixedRegNumber", "RelativeTh", RelativeRegNumber 
threshold = 8;10.0; = 16.0f/3.0f // noise dependent threshold on the response (sensitivity)
relativeThreshold=0.01;
regionsNumber = 3000;
relativeRegionsNumber = 0.5;
numberOfScales = 3; number of scale per octave
initialSigma = 1.6; amount of smoothing applied to the initial level of first octave
edgeEigenValueRatio =10.0; ratio of the eigenvalues
border = 5; number of pixels ignored at the border of image
doOnNormal = 1;
max_iter = 16; number of affine shape interations
convergenceThreshold=0.05; //for Baumberg iteration
smmWindowSize = 19; // width and height of the SMM mask, pixels
doBaumberg=0;
[Saddle]
doBaumberg=1;
doNMS = false;true;
threshold = 128.0;
epsilon = 1;
pyrLevels = 8;
scalefac = 1.3;
[CaffeDescriptor] ;Works only if compiled with WITH_CAFFE flag. Takes specified layer and treats is as descriptor
WeightsFile=/windows/caffe-models/weights/caffe_alexnet_model.caffemodel;/home/old-ufo/clear-caffe/models/bvlc_alexnet/bvlc_alexnet.caffemodel;
ProtoTxt=/windows/caffe-models/imagenet_val_protos/alexnet_desc.prototxt;/home/old-ufo/clear-caffe/models/bvlc_alexnet/deploy_desc.prototxt;
MeanB=114.45;104;
MeanG=114.45;117;
MeanR=114.45;123;
patchSize=91;  width and height of the patch
LayerName=pool2;inc1_concat
mrSize=3; = 3.0f*sqrt(3.0f). size of the measurement region (as multiple of the feature scale) 
Normalization=RootL2; Can be Power, L1, L2, RootL2
DoSIFTLikeOrientation=true
estimateOrientation=true
maxOrientations=2;
orientationThreshold=0.8
[SURF];OpenSURF implementation
octaves = 4;
intervals = 4;
init_sample=2;
thres =0.0004;
[FAST];OpenCV implementation
threshold=30;
nonmaxSuppression=true
type=2;
[TILDE];Authors implementation
;approx = false;
scaleKeypoint = 10.0;10.0;
keepOnlyPositive = true;false;
pathFilter=/home/old-ufo/mods/mods-new/build/tilde_filters/StLouis.txt
[TILDE_SCALE_SPACE];CMP implementation;
mode=FixedRegNumber;NotLessThanRegions; can be "FixedTh", "FixedRegNumber", "RelativeTh", RelativeRegNumber 
;threshold = 0.000000001;// noise dependent threshold on the response (sensitivity)
;relativeThreshold=0.01;
regionsNumber = 3000;
;relativeRegionsNumber = 0.5;
numberOfScales = 1; number of scale per octave
initialSigma = 0.1;1.6; amount of smoothing applied to the initial level of first octave
edgeEigenValueRatio =10.0; ratio of the eigenvalues
border = 5; number of pixels ignored at the border of image
doOnNormal = 1;
max_iter = 16; number of affine shape interations
convergenceThreshold=0.05; //for Baumberg iteration
smmWindowSize = 19; // width and height of the SMM mask, pixels
doBaumberg=0;
[ORB];OpenCV implementation
nfeatures = 500;
scaleFactor = 1.2
nlevels = 8;
edgeThreshold = 31;
firstLevel = 0;
WTA_K=2;
patchSize=31;
[BRISK];OpenCV implementation is used, it looks like broken
thresh=50
octaves=1
patternScale=1.0
[FREAK];OpenCV implementation == author`s
orientationNormalized=1
scaleNormalized=1
patternScale = 22.0;
nOctaves=4;
[DominantOrientation]
mrSize = 5.1962; = 3.0f*sqrt(3.0f). size of the measurement region (as multiple of the feature scale) for orientation estimation
patchSize = 41;  width and height of the patch
maxAngles = 5
threshold = 0.8; fraction of max peak to add peak
addUpright=false
halfSIFTMode = false;
[SIFTDescriptor] ;CMP implementation
photoNorm=true;
FastPatchExtraction=false
spatialBins = 4;  width and height bins 
orientationBins = 8;
maxBinValue = 0.2;0.2; 
patchSize = 41;  width and height of the patch
useRootSIFT = 1; use RootSIFT instead of SIFT
mrSize = 5.1962 ; = 3.0f*sqrt(3.0f). size of the measurement region (as multiple of the feature scale) for SIFT computation
[LIOPDescriptor];VLFeat implementation
patchSize = 41;  width and height of the patch
neighbours=4;
bins=6;
radius = 6;
threshold = 5.0;
[MROGHDescriptor] ;Author`s implementation
nDir = 8;
nOrder = 6;
nMultiRegion = 4;
[Matching]; FLANN from OpenCV
binary_matcher=hierarchical; Can be linear, lsh, hierarchical.
vector_matcher=kdtree;kdtree;Can be linear, kdtree,composite, kmeans
binary_dist=Hamming; Can be Hamming
vector_dist=L2;Can be L1,L2
doBothRANSACgroundTruth = 1; only when used ground truth mode
RANSACforStopping = 1; only when used ground truth mode and doBothRANSACgroundTruth =1
useDBforFGINN=0
SIFTDBfile=RootSIFTDB.txt;
matchRatioRootSIFT = 0.8; ratio of distances threshold
matchRatioHalfSIFT = 0.8; ratio of distances threshold
matchRatioHalfRootSIFT = 0.8; ratio of distances threshold
matchRatioInvSIFT = 0.8; ratio of distances threshold
matchRatioSIFT = 0.8; ratio of distances threshold
matchRatioSURF = 0.8; ratio of distances threshold
matchRatioLIOP = 0.8; ratio of distances threshold
matchRatioMROGH = 0.8; ratio of distances threshold
matchDistanceORB = 50; 
matchDistanceBRISK = 90; 
matchDistanceFREAK = 70; 
matchDistanceBRIEF = 70;
contradDist = 10.0;10.0; in pixels
checkFwithPTS = 0
kd_trees=4;
knn_checks=128;
doCLAHE=0;
[DuplicateFiltering]
doBeforeRANSAC = 1	;if == 0, tend to degenerated cases faster but a bit less true mathces
duplicateDist = 3.0	;in pixels
whichCorrespondenceRemains=bestFGINN;can random, bestFGINN, bestDistance, biggerRegion
[SCV]; CMP implementation
useSCV = 0;
[RANSAC] ;CMP implementation
err_threshold = 4.0;in pixels.
ErrorType=Sampson; Can be Sampson,SymmSum.
doSymmCheck = 1;
confidence = 0.99
max_samples = 1000000
localOptimization = 1
LAFcoef=3.0; LAFcoef*err_threshold = threshold for LAF-F-check. Use 0 to switch check off 
HLAFcoef=13.0; LAFcoef*err_threshold = threshold for Symmetrical LAF-H-check. Use 0 to switch check off 
;Symmetrical error >= 2* Sampson error, also LAF can be not precisely equal. 12 is recommended
[ImageOutput]
drawDetectedRegions=false;
writeImages = 1
drawOnlyCenters = 0; if 0, all matches ellipses with orientations will be shown. 
drawEpipolarLines = 0; in F-mode only. 
drawReprojected = 0;0 == ASIFT-like output
[TextOutput]
verbose=1;
timeLog= 1;
featureComplemetaryLog = 0;
writeKeypoints = 1;
writeMatches = 1;
outputAllTentatives=0;
outputEstimatedHorF=0;
[OverlapMatching]
doOverlapMatch = 0; only when used ground truth mode. Test purposes only
matchOrientedLAFs = 1;
overlapError = 0.04; Used in correspondence densification with homography.
; Overlap error according to 
;A. Vedaldi and H. Ling and S. Soatto 
;Knowing a Good Feature When You See It: 
;Ground Truth and Methodology to Evaluate Local Features for Recognition
;in Computer Vision: Detection, Recognition and Reconstruction, 2010
;Output
