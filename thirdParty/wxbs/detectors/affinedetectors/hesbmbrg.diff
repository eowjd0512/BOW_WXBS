diff --git a/detectors/affinedetectors/affine.cpp b/detectors/affinedetectors/affine.cpp
index e03d644..3ab7e9f 100644
--- a/detectors/affinedetectors/affine.cpp
+++ b/detectors/affinedetectors/affine.cpp
@@ -23,14 +23,17 @@ inline float intensityNormCoef (const float intensity, const float a, const floa
 
 }
 
+
+
+
 bool AffineShape::findAffineShape(const Mat &blur, float x, float y, float s, float pixelDistance, int type, float response)
 {
 
   float eigen_ratio_act = 0.0f, eigen_ratio_bef = 0.0f;
   float u11 = 1.0f, u12 = 0.0f, u21 = 0.0f, u22 = 1.0f, l1 = 1.0f, l2 = 1.0f;
   float lx = x/pixelDistance, ly = y/pixelDistance;
-
   float ratio = 1.0f;
+  Mat U, V, d, Au, Ap, D;
 
   if (par.doBaumberg)
     {
@@ -38,55 +41,96 @@ bool AffineShape::findAffineShape(const Mat &blur, float x, float y, float s, fl
       const int maskPixels = par.smmWindowSize * par.smmWindowSize;
       for (int l = 0; l < par.maxIterations; l++)
         {
-
-          // warp input according to current shape matrix
-          interpolate(blur, lx, ly, u11*ratio, u12*ratio, u21*ratio, u22*ratio, img);
-          // compute SMM on the warped patch
           float a = 0, b = 0, c = 0;
-          float *maskptr = mask.ptr<float>(0);
-          float *pfx = fx.ptr<float>(0), *pfy = fy.ptr<float>(0);
-
-         // float *imgptr = img.ptr<float>(0); //!
-
-          computeGradient(img, fx, fy);
-
-          // estimate SMM
-          for (int i = 0; i < maskPixels; ++i)
-            {
-              const float v = (*maskptr);
-              const float gxx = *pfx;
-              const float gyy = *pfy;
-              const float gxy = gxx * gyy;
-
-              a += gxx * gxx * v;
-              b += gxy * v;
-              c += gyy * gyy * v;
-              pfx++;
-              pfy++;
-              maskptr++;
-            }
-          a /= maskPixels;
-          b /= maskPixels;
-          c /= maskPixels;
-
-
-          // compute inverse sqrt of the SMM
-          invSqrt(a, b, c, l1, l2);
-
-          if ((a != a) || (b != b) || (c !=c)) //check for nan
-            break;
-
-          // update eigen ratios
-          eigen_ratio_bef = eigen_ratio_act;
-          eigen_ratio_act = 1 - l2 / l1;
-
-          // accumulate the affine shape matrix
-          float u11t = u11, u12t = u12;
-
-          u11 = a*u11t+b*u21;
-          u12 = a*u12t+b*u22;
-          u21 = b*u11t+c*u21;
-          u22 = b*u12t+c*u22;
+          if (par.affBmbrgMethod == AFF_BMBRG_SMM) {
+
+              // warp input according to current shape matrix
+              interpolate(blur, lx, ly, u11*ratio, u12*ratio, u21*ratio, u22*ratio, img);
+              // compute SMM on the warped patch
+              float *maskptr = mask.ptr<float>(0);
+              float *pfx = fx.ptr<float>(0), *pfy = fy.ptr<float>(0);
+
+             // float *imgptr = img.ptr<float>(0); //!
+
+              computeGradient(img, fx, fy);
+
+              // estimate SMM
+              for (int i = 0; i < maskPixels; ++i)
+                {
+                  const float v = (*maskptr);
+                  const float gxx = *pfx;
+                  const float gyy = *pfy;
+                  const float gxy = gxx * gyy;
+
+                  a += gxx * gxx * v;
+                  b += gxy * v;
+                  c += gyy * gyy * v;
+                  pfx++;
+                  pfy++;
+                  maskptr++;
+                }
+              a /= maskPixels;
+              b /= maskPixels;
+              c /= maskPixels;
+
+              // compute inverse sqrt of the SMM
+              invSqrt(a, b, c, l1, l2);
+
+              if ((a != a) || (b != b) || (c !=c)){ //check for nan
+                break;
+              }
+
+              // update eigen ratios
+              eigen_ratio_bef = eigen_ratio_act;
+              eigen_ratio_act = 1 - l2 / l1;
+
+              // accumulate the affine shape matrix
+              float u11t = u11, u12t = u12;
+
+              u11 = a*u11t+b*u21;
+              u12 = a*u12t+b*u22;
+              u21 = b*u11t+c*u21;
+              u22 = b*u12t+c*u22;
+
+          } else if (par.affBmbrgMethod == AFF_BMBRG_HESSIAN) {
+              float Dxx, Dxy, Dyy;
+              float affRatio = s * par.affMeasRegion / pixelDistance;
+              Ap = (Mat_<float>(2,2) << u11, u12, u21, u22);
+              interpolate(blur, lx, ly, u11*affRatio, u12*affRatio, u21*affRatio, u22*affRatio, imgHes);
+
+
+              Dxx = (      imgHes.at<float>(0,0) - 2.f*imgHes.at<float>(0,1) +     imgHes.at<float>(0,2)
+                   + 2.f*imgHes.at<float>(1,0) - 4.f*imgHes.at<float>(1,1) + 2.f*imgHes.at<float>(1,2)
+                   +     imgHes.at<float>(2,0) - 2.f*imgHes.at<float>(2,1) +     imgHes.at<float>(2,2));
+
+              Dyy = (      imgHes.at<float>(0,0) + 2.f*imgHes.at<float>(0,1) +     imgHes.at<float>(0,2)
+                   - 2.f*imgHes.at<float>(1,0) - 4.f*imgHes.at<float>(1,1) - 2.f*imgHes.at<float>(1,2)
+                   +     imgHes.at<float>(2,0) + 2.f*imgHes.at<float>(2,1) +     imgHes.at<float>(2,2));
+
+              Dxy = (      imgHes.at<float>(0,0)           -     imgHes.at<float>(0,2)
+                       - imgHes.at<float>(2,0)           +     imgHes.at<float>(2,2));
+
+              // Inv. square root using SVD method, somehow the SMM method does not work
+              Au = (Mat_<float>(2,2) << Dxx, Dxy, Dxy, Dyy);
+              SVD::compute(Au,d,U,V);
+
+              l1 = d.at<float>(0,0);
+              l2 = d.at<float>(0,1);
+
+              eigen_ratio_bef=eigen_ratio_act;
+              eigen_ratio_act=1-abs(l2)/abs(l1);
+
+              float det = sqrt(abs(l1*l2));
+              l2 = sqrt(sqrt(abs(l1)/det));
+              l1 = 1./l2;
+
+              D = (Mat_<float>(2,2) << l1, 0, 0, l2);
+              Au = U * D * V;
+              Ap = Au * Ap * Au;
+
+              u11 = Ap.at<float>(0,0); u12 = Ap.at<float>(0,1);
+              u21 = Ap.at<float>(1,0); u22 = Ap.at<float>(1,1);
+          }
 
           // compute the eigen values of the shape matrix
           if (!getEigenvalues(u11, u12, u21, u22, l1, l2))
diff --git a/detectors/affinedetectors/affine.h b/detectors/affinedetectors/affine.h
index 09907e3..2e53c3b 100644
--- a/detectors/affinedetectors/affine.h
+++ b/detectors/affinedetectors/affine.h
@@ -15,6 +15,14 @@
 #include <opencv2/highgui/highgui.hpp>
 #include "../helpers.h"
 
+/**
+ * @brief Possible invariants for Baumberg iteration
+ */
+enum AffineBaumbergMethod {
+    AFF_BMBRG_SMM = 0, // Use Second Moment Matrix (original baumberg)
+    AFF_BMBRG_HESSIAN  // Use Hessian matrix
+};
+
 struct AffineShapeParams
 {
   // number of affine shape interations
@@ -37,6 +45,10 @@ struct AffineShapeParams
 
   int   doBaumberg;
 
+  // Invariant used for Baumberg iteration
+  AffineBaumbergMethod affBmbrgMethod;
+  float affMeasRegion;
+
   AffineShapeParams()
   {
     maxIterations = 16;
@@ -46,6 +58,8 @@ struct AffineShapeParams
     smmWindowSize = 19;
     mrSize = 3.0f*sqrt(3.0f);
     doBaumberg = 1;
+    affBmbrgMethod = AFF_BMBRG_SMM;
+    affMeasRegion = 0.5;
   }
 };
 
@@ -84,6 +98,7 @@ public:
     orimask(par.PEParam.patchSize, par.PEParam.patchSize, CV_32FC1),
     mask(par.smmWindowSize, par.smmWindowSize, CV_32FC1),
     img(par.smmWindowSize, par.smmWindowSize, CV_32FC1),
+    imgHes(3, 3, CV_32FC1),
     fx(par.smmWindowSize, par.smmWindowSize, CV_32FC1),
     fy(par.smmWindowSize, par.smmWindowSize, CV_32FC1)
   {
@@ -130,7 +145,7 @@ protected:
 private:
   cv::Mat gmag, gori, orimask;
   std::vector<unsigned char> workspace;
-  cv::Mat mask, img, fx, fy;
+  cv::Mat mask, img, imgHes, fx, fy;
 };
 
 
